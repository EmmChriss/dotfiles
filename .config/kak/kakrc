evaluate-commands %sh{
	plugins="$HOME/.cache/kak-plugins"
	mkdir -p "$plugins"
	[ ! -e "$plugins/plug.kak" ] && \
		git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
	printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
set global plug_install_dir %sh{ echo "$HOME/.cache/kak-plugins" }
set global plug_always_ensure true
plug 'andreyorst/plug.kak' noload
# plug 'delapouite/kakoune-palette'
plug "Delapouite/kakoune-buffers" config %{
	hook global WinDisplay .* info-buffers
	map global user b ':enter-user-mode buffers<ret>' -docstring 'buffers'
	map global buffers P ':pick-buffers<ret><esc>:enter-user-mode -lock pick-buffers<ret>' -docstring 'locked pick-buffers mode'
	
	alias global bd delete-buffer
	alias global bi info-buffers
}
plug "occivink/kakoune-gdb" config %{
	set global gdb_location_symbol ">"
	hook global WinSetOption filetype=rust %{
		set buffer gdb_program "rust-gdb"
	}
	
	declare-user-mode gdb
	map global gdb r ':gdb-run<ret>' -docstring 'run'
	map global gdb k ':gdb-cmd kill<ret>' -docstring 'run'
	map global gdb n ':gdb-next<ret>' -docstring 'next'
	map global gdb s ':gdb-step<ret>' -docstring 'step'
	map global gdb f ':gdb-finish<ret>' -docstring 'finish'
	map global gdb b ':gdb-toggle-breakpoint<ret>' -docstring 'toggle breakpoint'
	map global gdb c ':gdb-continue<ret>' -docstring 'continue'
	
	hook global GlobalSetOption gdb_started=false %{
		unmap global user g ':enter-user-mode gdb<ret>' -docstring 'gdb'
		unmap global user G ':enter-user-mode -lock gdb<ret>' -docstring 'gdb (lock)'
	}
	
	hook global GlobalSetOption gdb_started=true %{
		map global user g ':enter-user-mode gdb<ret>' -docstring 'gdb'
		map global user G ':enter-user-mode -lock gdb<ret>' -docstring 'gdb (lock)'
	}
}
plug "ul/kak-lsp" noload config %{
	map global user l -docstring 'load lsp' ':lsp-load<ret>'
	
	define-command en -docstring 'go to next error/warning from lsp' %{ lsp-find-error }
	define-command ep -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous }
	define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error; lsp-find-error --previous }
	
	declare-option -hidden str lsp_progress ""
	
	define-command lsp-load -hidden %{
		evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}
		
		define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
		
		set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
		lsp-enable
		
		map global user l ':enter-user-mode lsp<ret>' -docstring 'lsp'
		map global lsp  R ':lsp-restart<ret>' -docstring 'restart lsp'
		
		# unmap global goto d
		# unmap global goto r
		
		lsp-auto-hover-enable
		
		set global lsp_hover_anchor true
		set global lsp_insert_spaces false
		set global lsp_auto_highlight_references true
		set global lsp_hover_max_lines 4
		
		set global lsp_diagnostic_line_error_sign !
		set global lsp_diagnostic_line_warning_sign ?
		
		hook global KakEnd .* lsp-exit
		
		# as of v2020.09.01, this is not yet usable
		hook global WinSetOption filetype=rust %{
			hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
			hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
			hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
			hook -once -always window WinSetOption filetype=.* %{
				remove-hooks window rust-inlay-hints
			}
		}
		
		# copied from https://github.com/zigtools/zls/wiki/Installing-for-Kakoune
		# configure zls: we enable zig fmt, reference and semantic highlighting
		hook global WinSetOption filetype=zig %{
			# set-option buffer formatcmd 'zig fmt'
			set-option window lsp_auto_highlight_references true
			set-option global lsp_server_configuration zls.zig_lib_path="/usr/lib/zig"
			set-option -add global lsp_server_configuration zls.warn_style=true
			set-option global lsp_insert_spaces true
			# set-option -add global lsp_server_configuration zls.enable_semantic_tokens=true
			# hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
			# hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
			# hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
			# hook -once -always window WinSetOption filetype=.* %{
			# 	remove-hooks window semantic-tokens
			# }
		}
		
		# Copied from gh/ul/kak-lsp/wiki/Handling-progress-notifications
		def -hidden -params 4 -override lsp-handle-progress %{
			set global lsp_progress %sh{
				if test -n "$4"; then
					echo "[done]"
				else
					echo "[$1${2:+" $2"}${3:+" $3%"}]"
				fi
			}
		}
	}
}
plug "occivink/kakoune-sudo-write" config %{
	def sudo-write-quit -docstring 'Write using sudo then quit' %{
		sudo-write
		quit
	}
	alias global sw  sudo-write
	alias global swq sudo-write-quit
}
plug "KJ_Duncan/kakoune-kotlin.kak" domain "bitbucket.org"
plug "kkga/gdscript.kak"

# Source filetypes
source %sh{ echo "$kak_config/filetypes/csharp.kak" }
source %sh{ echo "$kak_config/filetypes/gdscript.kak" }

# Colorscheme
colorscheme nord-dark-modified

# Shell-like <control-direction> word-selection
map global insert <c-left> '<a-;>b'
map global insert <c-right> '<a-;>w'

# Same in normal mode
map global normal <c-left> 'b' 
map global normal <c-right> 'w'

# Number lines
addhl global/ number-lines -hlcursor -min-digits 3

# Highlight @UPPER tags
# eg @TODO, #TODO, @NOTE, @BUG, @SAFE
addhl global/ regex ' ((@|#)\b[A-Z]+)\b' 1:default+rb

# Highlight tabs
addhl global/whitespace show-whitespaces -lf ' ' -spc ' ' -nbsp ' ' -tab 'â …'
addhl global/matching   show-matching

# Bye-bye clippy
set global ui_options ncurses_assistant=off

# Added current line index to modeline
set global modelinefmt '%opt{lsp_progress} {red,default}%opt{gdb_indicator}{default,default} %val{bufname} %val{cursor_line},%val{cursor_char_column} %val{buf_line_count} {{context_info}} {{mode_info}} %val{client}@[%val{session}]'

# Set tab length
set global tabstop 4

# Align cursors with spaces
set global aligntab false

# Remove *-trim-indent hooks
hook global WinSetOption filetype=.* %{
	remove-hooks window \w+-trim-indent
}

# Lint on write
hook global BufWritePost .* %{ eval %sh{
	if [ -n "$kak_opt_lintcmd" ]; then
		echo 'lint'
	fi
}}


# Shell linting
hook global WinSetOption filetype=(bash|sh|dash) %{
	set buffer lintcmd "shellcheck -f gcc"
	lint-enable
}

hook global BufCreate .* %{
	# Parse Vim-style modelines
	modeline-parse
	
	# Load editorconfig
	editorconfig-load
}

# Copy to clipboard
hook global NormalKey y %{ nop %sh{
	printf %s "$kak_main_reg_dquote" | xsel -ib
}}

# Paste from clipboard
map global normal P '!xsel -ob<ret>'
map global normal p '<a-!>xsel -ob<ret>'

# Comment and uncomment
map global normal '#' ':comment-line<ret>' -docstring 'comment line'
map global normal '<a-#>' ':comment-block<ret>' -docstring 'comment block'

# Set indent char to tab
set global indentwidth 0
set global scrolloff 4,4

# except for
hook global WinSetOption filetype=(haskell|elm|zig) %{
	set-option buffer indentwidth 4
}

map global insert <tab>   ' <a-;><gt><backspace>'
map global insert <s-tab> ' <a-;><lt><backspace>'
